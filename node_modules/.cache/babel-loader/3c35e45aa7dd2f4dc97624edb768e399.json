{"ast":null,"code":"var _jsxFileName = \"/Users/kamal/Downloads/my-app/src/chart.js\";\nimport React, { Component } from 'react';\nimport CanvasJSReact from './canvasjs.react';\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar dataPoints = [];\nconst options = {\n  theme: \"light2\",\n  // \"light1\", \"light2\", \"dark1\", \"dark2\"\n  animationEnabled: true,\n  exportEnabled: true,\n  title: {\n    text: \"Intel Corporation Stock Price -  2017\"\n  },\n  axisX: {\n    valueFormatString: \"ss\"\n  },\n  axisY: {\n    includeZero: false,\n    prefix: \"$\",\n    title: \"Price (in USD)\"\n  },\n  data: [{\n    type: \"candlestick\",\n    showInLegend: true,\n    name: \"Intel Corporation\",\n    yValueFormatString: \"$###0.00\",\n    // xValueFormatString: \"MMMM YYYY\",\n    xValueType: \"dateTime\",\n    dataPoints: dataPoints\n  }]\n};\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      candleChartData: [],\n      stateOptions: options\n    };\n  }\n\n  componentDidMount() {\n    var chart = this.chart;\n    fetch('https://public.coindcx.com/market_data/candles?pair=B-BTC_USDT&interval=1m&limit=100', {\n      mode: 'no-cors'\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      for (var i = 0; i < data.length; i++) {\n        dataPoints.push({\n          x: data[i].x,\n          y: data[i].y\n        });\n      }\n\n      chart.render();\n    }); // const apiDummyData = [{\n    //     \"open\": 6683.24,\n    //     \"high\": 6684.98,\n    //     \"low\": 6681.15,\n    //     \"volume\": 10.796612,\n    //     \"close\": 6684.35,\n    //     \"time\": 1586771820000\n    // },\n    // {\n    //     \"open\": 6682.71,\n    //     \"high\": 6683.61,\n    //     \"low\": 6679.34,\n    //     \"volume\": 37.627571,\n    //     \"close\": 6683.24,\n    //     \"time\": 1586771760000\n    // },\n    // {\n    //     \"open\": 6683.33,\n    //     \"high\": 6686.81,\n    //     \"low\": 6681.4,\n    //     \"volume\": 26.558738,\n    //     \"close\": 6683.53,\n    //     \"time\": 1586771700000\n    // },\n    // {\n    //     \"open\": 6681.38,\n    //     \"high\": 6687,\n    //     \"low\": 6680.82,\n    //     \"volume\": 46.546386,\n    //     \"close\": 6683.32,\n    //     \"time\": 1586771640000\n    // },\n    // {\n    //     \"open\": 6677.52,\n    //     \"high\": 6682,\n    //     \"low\": 6677.26,\n    //     \"volume\": 24.203536,\n    //     \"close\": 6681.37,\n    //     \"time\": 1586771580000\n    // },\n    // {\n    //     \"open\": 6682.54,\n    //     \"high\": 6682.54,\n    //     \"low\": 6677,\n    //     \"volume\": 33.415822,\n    //     \"close\": 6677.33,\n    //     \"time\": 1586771520000\n    // }];\n    // apiDummyData.forEach(val => {\n    //     dataPoints.push({x: val.time,\n    //                     y: [val.open, val.high, val.low, val.close]})\n    // })\n    // chart.render();\n  }\n\n  render() {\n    console.log(\"sec\", this.state.stateOptions);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(CanvasJSChart, {\n      options: this.state.stateOptions,\n      onRef: ref => this.chart = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Chart;","map":{"version":3,"sources":["/Users/kamal/Downloads/my-app/src/chart.js"],"names":["React","Component","CanvasJSReact","CanvasJS","CanvasJSChart","dataPoints","options","theme","animationEnabled","exportEnabled","title","text","axisX","valueFormatString","axisY","includeZero","prefix","data","type","showInLegend","name","yValueFormatString","xValueType","Chart","constructor","props","state","candleChartData","stateOptions","componentDidMount","chart","fetch","mode","then","response","json","i","length","push","x","y","render","console","log","ref"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport CanvasJSReact from './canvasjs.react';\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nvar dataPoints =[];\nconst options = {\n    theme: \"light2\", // \"light1\", \"light2\", \"dark1\", \"dark2\"\n    animationEnabled: true,\n    exportEnabled: true,\n    title:{\n        text: \"Intel Corporation Stock Price -  2017\"\n    },\n    axisX: {\n        valueFormatString: \"ss\"\n    },\n    axisY: {\n        includeZero:false,\n        prefix: \"$\",\n        title: \"Price (in USD)\"\n    },\n    data: [{\n        type: \"candlestick\",\n        showInLegend: true,\n        name: \"Intel Corporation\",\n        yValueFormatString: \"$###0.00\",\n        // xValueFormatString: \"MMMM YYYY\",\n        xValueType: \"dateTime\",\n        dataPoints: dataPoints\n    }\n  ]\n}\n\nclass Chart extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            candleChartData : [],\n            stateOptions : options\n        }\n    }\n    \n    componentDidMount(){\n        var chart = this.chart;\n\t\tfetch('https://public.coindcx.com/market_data/candles?pair=B-BTC_USDT&interval=1m&limit=100', { mode: 'no-cors'})\n\t\t.then(function(response) {\n\t\t\treturn response.json();\n\t\t})\n\t\t.then(function(data) {\n\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\tdataPoints.push({\n\t\t\t\t\tx: data[i].x,\n\t\t\t\t\ty: data[i].y\n\t\t\t\t});\n\t\t\t}\n\t\t\tchart.render();\n        });\n        // const apiDummyData = [{\n        //     \"open\": 6683.24,\n        //     \"high\": 6684.98,\n        //     \"low\": 6681.15,\n        //     \"volume\": 10.796612,\n        //     \"close\": 6684.35,\n        //     \"time\": 1586771820000\n        // },\n        // {\n        //     \"open\": 6682.71,\n        //     \"high\": 6683.61,\n        //     \"low\": 6679.34,\n        //     \"volume\": 37.627571,\n        //     \"close\": 6683.24,\n        //     \"time\": 1586771760000\n        // },\n        // {\n        //     \"open\": 6683.33,\n        //     \"high\": 6686.81,\n        //     \"low\": 6681.4,\n        //     \"volume\": 26.558738,\n        //     \"close\": 6683.53,\n        //     \"time\": 1586771700000\n        // },\n        // {\n        //     \"open\": 6681.38,\n        //     \"high\": 6687,\n        //     \"low\": 6680.82,\n        //     \"volume\": 46.546386,\n        //     \"close\": 6683.32,\n        //     \"time\": 1586771640000\n        // },\n        // {\n        //     \"open\": 6677.52,\n        //     \"high\": 6682,\n        //     \"low\": 6677.26,\n        //     \"volume\": 24.203536,\n        //     \"close\": 6681.37,\n        //     \"time\": 1586771580000\n        // },\n        // {\n        //     \"open\": 6682.54,\n        //     \"high\": 6682.54,\n        //     \"low\": 6677,\n        //     \"volume\": 33.415822,\n        //     \"close\": 6677.33,\n        //     \"time\": 1586771520000\n        // }];\n\n        // apiDummyData.forEach(val => {\n        //     dataPoints.push({x: val.time,\n        //                     y: [val.open, val.high, val.low, val.close]})\n        // })\n        // chart.render();\n    }\n\n\trender() {\n        console.log(\"sec\",this.state.stateOptions);\n\t\treturn (\n\t\t<div>\n\t\t\t<CanvasJSChart options = {this.state.stateOptions}\n\t\t\t\tonRef={ref => this.chart = ref}\n\t\t\t/>\n\t\t\t{/*You can get reference to the chart instance as shown above using onRef. This allows you to access all chart properties and methods*/}\n\t\t</div>\n\t\t);\n\t}\n}\nexport default Chart;                             "]},"metadata":{},"sourceType":"module"}