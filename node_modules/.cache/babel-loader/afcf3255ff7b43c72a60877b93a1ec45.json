{"ast":null,"code":"var _jsxFileName = \"/Users/navneet/Desktop/my-app/src/chart.js\";\nimport React, { Component } from 'react';\nimport CanvasJSReact from './canvasjs.react';\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar dataPoints = [];\nconst options = {\n  theme: \"light2\",\n  // \"light1\", \"light2\", \"dark1\", \"dark2\"\n  animationEnabled: true,\n  exportEnabled: true,\n  title: {\n    text: \"Intel Corporation Stock Price -  2017\"\n  },\n  axisX: {\n    valueFormatString: \"MMM\"\n  },\n  axisY: {\n    includeZero: false,\n    prefix: \"$\",\n    title: \"Price (in USD)\"\n  },\n  data: [{\n    type: \"candlestick\",\n    showInLegend: true,\n    name: \"Intel Corporation\",\n    yValueFormatString: \"$###0.00\",\n    xValueFormatString: \"MMMM YYYY\",\n    dataPoints: dataPoints\n  }]\n};\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.convertMiliseconds = (miliseconds, format) => {\n      var days, hours, minutes, seconds, total_hours, total_minutes, total_seconds;\n      total_seconds = parseInt(Math.floor(miliseconds / 1000));\n      total_minutes = parseInt(Math.floor(total_seconds / 60));\n      total_hours = parseInt(Math.floor(total_minutes / 60));\n      days = parseInt(Math.floor(total_hours / 24));\n      seconds = parseInt(total_seconds % 60);\n      minutes = parseInt(total_minutes % 60);\n      hours = parseInt(total_hours % 24);\n\n      switch (format) {\n        case 's':\n          return total_seconds;\n\n        case 'm':\n          return total_minutes;\n\n        case 'h':\n          return total_hours;\n\n        case 'd':\n          return days;\n\n        default:\n          return {\n            d: days,\n            h: hours,\n            m: minutes,\n            s: seconds\n          };\n      }\n    };\n\n    this.getChartData = () => {\n      // fetch(\"https://public.coindcx.com/exchange/v1/markets_details\")\n      // .then(result => result.json()).then(response => {console.log(\"response\", response);\n      //     // this.setState({user : user})\n      // })\n      let getOptions = {\n        theme: \"light2\",\n        // \"light1\", \"light2\", \"dark1\", \"dark2\"\n        animationEnabled: true,\n        exportEnabled: true,\n        title: {\n          text: \"Intel Corporation Stock Price -  2017\"\n        },\n        axisX: {\n          valueFormatString: \"ms\"\n        },\n        axisY: {\n          includeZero: false,\n          prefix: \"$\",\n          title: \"Price (in USD)\"\n        },\n        data: [{\n          type: \"candlestick\",\n          showInLegend: true,\n          name: \"Intel Corporation\",\n          yValueFormatString: \"$###0.00\",\n          xValueFormatString: \"MMMM YYYY\"\n        }]\n      };\n      const apiDummyData = [{\n        \"open\": 6683.24,\n        \"high\": 6684.98,\n        \"low\": 6681.15,\n        \"volume\": 10.796612,\n        \"close\": 6684.35,\n        \"time\": 1586771820000\n      }, {\n        \"open\": 6682.71,\n        \"high\": 6683.61,\n        \"low\": 6679.34,\n        \"volume\": 37.627571,\n        \"close\": 6683.24,\n        \"time\": 1586771760000\n      }, {\n        \"open\": 6683.33,\n        \"high\": 6686.81,\n        \"low\": 6681.4,\n        \"volume\": 26.558738,\n        \"close\": 6683.53,\n        \"time\": 1586771700000\n      }, {\n        \"open\": 6681.38,\n        \"high\": 6687,\n        \"low\": 6680.82,\n        \"volume\": 46.546386,\n        \"close\": 6683.32,\n        \"time\": 1586771640000\n      }, {\n        \"open\": 6677.52,\n        \"high\": 6682,\n        \"low\": 6677.26,\n        \"volume\": 24.203536,\n        \"close\": 6681.37,\n        \"time\": 1586771580000\n      }, {\n        \"open\": 6682.54,\n        \"high\": 6682.54,\n        \"low\": 6677,\n        \"volume\": 33.415822,\n        \"close\": 6677.33,\n        \"time\": 1586771520000\n      }];\n      let chartDummyData = apiDummyData.map(val => {\n        return {\n          x: new Date(\"2017-01-01\"),\n          y: [val.open, val.high, val.low, val.close]\n        };\n      }); // console.log(\"data\", options);\n\n      getOptions.data[0].dataPoints = chartDummyData; // options.title.text = \"Dummy Data\";\n      // // console.log(\"data\", options);\n\n      this.setState({\n        stateOptions: getOptions\n      });\n    };\n\n    this.state = {\n      candleChartData: [],\n      stateOptions: options\n    };\n  }\n\n  componentDidMount() {\n    var chart = this.chart;\n    fetch('https://canvasjs.com/data/gallery/react/microsoft-stock-price.json').then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      for (var i = 0; i < data.length; i++) {\n        dataPoints.push({\n          x: data[i].x,\n          y: data[i].y\n        });\n      }\n\n      chart.render();\n    }); // this.getChartData();\n  }\n\n  render() {\n    console.log(\"sec\", this.state.stateOptions);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(CanvasJSChart, {\n      options: this.state.stateOptions,\n      onRef: ref => this.chart = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Chart;","map":{"version":3,"sources":["/Users/navneet/Desktop/my-app/src/chart.js"],"names":["React","Component","CanvasJSReact","CanvasJS","CanvasJSChart","dataPoints","options","theme","animationEnabled","exportEnabled","title","text","axisX","valueFormatString","axisY","includeZero","prefix","data","type","showInLegend","name","yValueFormatString","xValueFormatString","Chart","constructor","props","convertMiliseconds","miliseconds","format","days","hours","minutes","seconds","total_hours","total_minutes","total_seconds","parseInt","Math","floor","d","h","m","s","getChartData","getOptions","apiDummyData","chartDummyData","map","val","x","Date","y","open","high","low","close","setState","stateOptions","state","candleChartData","componentDidMount","chart","fetch","then","response","json","i","length","push","render","console","log","ref"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,IAAIC,QAAQ,GAAGD,aAAa,CAACC,QAA7B;AACA,IAAIC,aAAa,GAAGF,aAAa,CAACE,aAAlC;AAEA,IAAIC,UAAU,GAAE,EAAhB;AACA,MAAMC,OAAO,GAAG;AACZC,EAAAA,KAAK,EAAE,QADK;AACK;AACjBC,EAAAA,gBAAgB,EAAE,IAFN;AAGZC,EAAAA,aAAa,EAAE,IAHH;AAIZC,EAAAA,KAAK,EAAC;AACFC,IAAAA,IAAI,EAAE;AADJ,GAJM;AAOZC,EAAAA,KAAK,EAAE;AACHC,IAAAA,iBAAiB,EAAE;AADhB,GAPK;AAUZC,EAAAA,KAAK,EAAE;AACHC,IAAAA,WAAW,EAAC,KADT;AAEHC,IAAAA,MAAM,EAAE,GAFL;AAGHN,IAAAA,KAAK,EAAE;AAHJ,GAVK;AAeZO,EAAAA,IAAI,EAAE,CAAC;AACHC,IAAAA,IAAI,EAAE,aADH;AAEHC,IAAAA,YAAY,EAAE,IAFX;AAGHC,IAAAA,IAAI,EAAE,mBAHH;AAIHC,IAAAA,kBAAkB,EAAE,UAJjB;AAKHC,IAAAA,kBAAkB,EAAE,WALjB;AAMHjB,IAAAA,UAAU,EAAEA;AANT,GAAD;AAfM,CAAhB;;AA0BA,MAAMkB,KAAN,SAAoBtB,SAApB,CAA8B;AAC1BuB,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAyBlBC,kBAzBkB,GAyBG,CAACC,WAAD,EAAcC,MAAd,KAAyB;AAC1C,UAAIC,IAAJ,EAAUC,KAAV,EAAiBC,OAAjB,EAA0BC,OAA1B,EAAmCC,WAAnC,EAAgDC,aAAhD,EAA+DC,aAA/D;AAEAA,MAAAA,aAAa,GAAGC,QAAQ,CAACC,IAAI,CAACC,KAAL,CAAWX,WAAW,GAAG,IAAzB,CAAD,CAAxB;AACAO,MAAAA,aAAa,GAAGE,QAAQ,CAACC,IAAI,CAACC,KAAL,CAAWH,aAAa,GAAG,EAA3B,CAAD,CAAxB;AACAF,MAAAA,WAAW,GAAGG,QAAQ,CAACC,IAAI,CAACC,KAAL,CAAWJ,aAAa,GAAG,EAA3B,CAAD,CAAtB;AACAL,MAAAA,IAAI,GAAGO,QAAQ,CAACC,IAAI,CAACC,KAAL,CAAWL,WAAW,GAAG,EAAzB,CAAD,CAAf;AAEAD,MAAAA,OAAO,GAAGI,QAAQ,CAACD,aAAa,GAAG,EAAjB,CAAlB;AACAJ,MAAAA,OAAO,GAAGK,QAAQ,CAACF,aAAa,GAAG,EAAjB,CAAlB;AACAJ,MAAAA,KAAK,GAAGM,QAAQ,CAACH,WAAW,GAAG,EAAf,CAAhB;;AAEA,cAAOL,MAAP;AACE,aAAK,GAAL;AACI,iBAAOO,aAAP;;AACJ,aAAK,GAAL;AACI,iBAAOD,aAAP;;AACJ,aAAK,GAAL;AACI,iBAAOD,WAAP;;AACJ,aAAK,GAAL;AACI,iBAAOJ,IAAP;;AACJ;AACI,iBAAO;AAAEU,YAAAA,CAAC,EAAEV,IAAL;AAAWW,YAAAA,CAAC,EAAEV,KAAd;AAAqBW,YAAAA,CAAC,EAAEV,OAAxB;AAAiCW,YAAAA,CAAC,EAAEV;AAApC,WAAP;AAVN;AAYH,KAjDiB;;AAAA,SAmDlBW,YAnDkB,GAmDH,MAAM;AACjB;AACA;AACA;AACA;AACA,UAAIC,UAAU,GAAG;AACbrC,QAAAA,KAAK,EAAE,QADM;AACI;AACjBC,QAAAA,gBAAgB,EAAE,IAFL;AAGbC,QAAAA,aAAa,EAAE,IAHF;AAIbC,QAAAA,KAAK,EAAC;AACFC,UAAAA,IAAI,EAAE;AADJ,SAJO;AAObC,QAAAA,KAAK,EAAE;AACHC,UAAAA,iBAAiB,EAAE;AADhB,SAPM;AAUbC,QAAAA,KAAK,EAAE;AACHC,UAAAA,WAAW,EAAC,KADT;AAEHC,UAAAA,MAAM,EAAE,GAFL;AAGHN,UAAAA,KAAK,EAAE;AAHJ,SAVM;AAebO,QAAAA,IAAI,EAAE,CAAC;AACHC,UAAAA,IAAI,EAAE,aADH;AAEHC,UAAAA,YAAY,EAAE,IAFX;AAGHC,UAAAA,IAAI,EAAE,mBAHH;AAIHC,UAAAA,kBAAkB,EAAE,UAJjB;AAKHC,UAAAA,kBAAkB,EAAE;AALjB,SAAD;AAfO,OAAjB;AAyBA,YAAMuB,YAAY,GAAG,CAAC;AAClB,gBAAQ,OADU;AAElB,gBAAQ,OAFU;AAGlB,eAAO,OAHW;AAIlB,kBAAU,SAJQ;AAKlB,iBAAS,OALS;AAMlB,gBAAQ;AANU,OAAD,EAQrB;AACI,gBAAQ,OADZ;AAEI,gBAAQ,OAFZ;AAGI,eAAO,OAHX;AAII,kBAAU,SAJd;AAKI,iBAAS,OALb;AAMI,gBAAQ;AANZ,OARqB,EAgBrB;AACI,gBAAQ,OADZ;AAEI,gBAAQ,OAFZ;AAGI,eAAO,MAHX;AAII,kBAAU,SAJd;AAKI,iBAAS,OALb;AAMI,gBAAQ;AANZ,OAhBqB,EAwBrB;AACI,gBAAQ,OADZ;AAEI,gBAAQ,IAFZ;AAGI,eAAO,OAHX;AAII,kBAAU,SAJd;AAKI,iBAAS,OALb;AAMI,gBAAQ;AANZ,OAxBqB,EAgCrB;AACI,gBAAQ,OADZ;AAEI,gBAAQ,IAFZ;AAGI,eAAO,OAHX;AAII,kBAAU,SAJd;AAKI,iBAAS,OALb;AAMI,gBAAQ;AANZ,OAhCqB,EAwCrB;AACI,gBAAQ,OADZ;AAEI,gBAAQ,OAFZ;AAGI,eAAO,IAHX;AAII,kBAAU,SAJd;AAKI,iBAAS,OALb;AAMI,gBAAQ;AANZ,OAxCqB,CAArB;AAiDA,UAAIC,cAAc,GAAGD,YAAY,CAACE,GAAb,CAAkBC,GAAD,IAAS;AACvB,eAAO;AAAEC,UAAAA,CAAC,EAAE,IAAIC,IAAJ,CAAS,YAAT,CAAL;AAA6BC,UAAAA,CAAC,EAAE,CAACH,GAAG,CAACI,IAAL,EAAWJ,GAAG,CAACK,IAAf,EAAqBL,GAAG,CAACM,GAAzB,EAA8BN,GAAG,CAACO,KAAlC;AAAhC,SAAP;AACH,OAFA,CAArB,CA/EiB,CAmFjB;;AACAX,MAAAA,UAAU,CAAC3B,IAAX,CAAgB,CAAhB,EAAmBZ,UAAnB,GAAgCyC,cAAhC,CApFiB,CAqFjB;AACA;;AACA,WAAKU,QAAL,CAAc;AAACC,QAAAA,YAAY,EAAGb;AAAhB,OAAd;AAEH,KA5IiB;;AAEd,SAAKc,KAAL,GAAa;AACTC,MAAAA,eAAe,EAAG,EADT;AAETF,MAAAA,YAAY,EAAGnD;AAFN,KAAb;AAIH;;AACDsD,EAAAA,iBAAiB,GAAE;AACf,QAAIC,KAAK,GAAG,KAAKA,KAAjB;AACNC,IAAAA,KAAK,CAAC,oEAAD,CAAL,CACCC,IADD,CACM,UAASC,QAAT,EAAmB;AACxB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACA,KAHD,EAICF,IAJD,CAIM,UAAS9C,IAAT,EAAe;AACpB,WAAK,IAAIiD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjD,IAAI,CAACkD,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACrC7D,QAAAA,UAAU,CAAC+D,IAAX,CAAgB;AACfnB,UAAAA,CAAC,EAAEhC,IAAI,CAACiD,CAAD,CAAJ,CAAQjB,CADI;AAEfE,UAAAA,CAAC,EAAElC,IAAI,CAACiD,CAAD,CAAJ,CAAQf;AAFI,SAAhB;AAIA;;AACDU,MAAAA,KAAK,CAACQ,MAAN;AACA,KAZD,EAFqB,CAef;AACH;;AAuHJA,EAAAA,MAAM,GAAG;AACFC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkB,KAAKb,KAAL,CAAWD,YAA7B;AACN,WACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,aAAD;AAAe,MAAA,OAAO,EAAI,KAAKC,KAAL,CAAWD,YAArC;AACC,MAAA,KAAK,EAAEe,GAAG,IAAI,KAAKX,KAAL,GAAaW,GAD5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADA;AAQA;;AAzJ4B;;AA2J9B,eAAejD,KAAf","sourcesContent":["import React, { Component } from 'react';\nimport CanvasJSReact from './canvasjs.react';\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nvar dataPoints =[];\nconst options = {\n    theme: \"light2\", // \"light1\", \"light2\", \"dark1\", \"dark2\"\n    animationEnabled: true,\n    exportEnabled: true,\n    title:{\n        text: \"Intel Corporation Stock Price -  2017\"\n    },\n    axisX: {\n        valueFormatString: \"MMM\"\n    },\n    axisY: {\n        includeZero:false,\n        prefix: \"$\",\n        title: \"Price (in USD)\"\n    },\n    data: [{\n        type: \"candlestick\",\n        showInLegend: true,\n        name: \"Intel Corporation\",\n        yValueFormatString: \"$###0.00\",\n        xValueFormatString: \"MMMM YYYY\",\n        dataPoints: dataPoints\n    }\n  ]\n}\n\nclass Chart extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            candleChartData : [],\n            stateOptions : options\n        }\n    }\n    componentDidMount(){\n        var chart = this.chart;\n\t\tfetch('https://canvasjs.com/data/gallery/react/microsoft-stock-price.json')\n\t\t.then(function(response) {\n\t\t\treturn response.json();\n\t\t})\n\t\t.then(function(data) {\n\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\tdataPoints.push({\n\t\t\t\t\tx: data[i].x,\n\t\t\t\t\ty: data[i].y\n\t\t\t\t});\n\t\t\t}\n\t\t\tchart.render();\n\t\t});\n        // this.getChartData();\n    }\n\n    convertMiliseconds = (miliseconds, format) => {\n        var days, hours, minutes, seconds, total_hours, total_minutes, total_seconds;\n        \n        total_seconds = parseInt(Math.floor(miliseconds / 1000));\n        total_minutes = parseInt(Math.floor(total_seconds / 60));\n        total_hours = parseInt(Math.floor(total_minutes / 60));\n        days = parseInt(Math.floor(total_hours / 24));\n      \n        seconds = parseInt(total_seconds % 60);\n        minutes = parseInt(total_minutes % 60);\n        hours = parseInt(total_hours % 24);\n        \n        switch(format) {\n          case 's':\n              return total_seconds;\n          case 'm':\n              return total_minutes;\n          case 'h':\n              return total_hours;\n          case 'd':\n              return days;\n          default:\n              return { d: days, h: hours, m: minutes, s: seconds };\n        }\n    }\n    \n    getChartData = () => {\n        // fetch(\"https://public.coindcx.com/exchange/v1/markets_details\")\n        // .then(result => result.json()).then(response => {console.log(\"response\", response);\n        //     // this.setState({user : user})\n        // })\n        let getOptions = {\n            theme: \"light2\", // \"light1\", \"light2\", \"dark1\", \"dark2\"\n            animationEnabled: true,\n            exportEnabled: true,\n            title:{\n                text: \"Intel Corporation Stock Price -  2017\"\n            },\n            axisX: {\n                valueFormatString: \"ms\"\n            },\n            axisY: {\n                includeZero:false,\n                prefix: \"$\",\n                title: \"Price (in USD)\"\n            },\n            data: [{\n                type: \"candlestick\",\n                showInLegend: true,\n                name: \"Intel Corporation\",\n                yValueFormatString: \"$###0.00\",\n                xValueFormatString: \"MMMM YYYY\"\n            }\n          ]\n        };\n\n        const apiDummyData = [{\n            \"open\": 6683.24,\n            \"high\": 6684.98,\n            \"low\": 6681.15,\n            \"volume\": 10.796612,\n            \"close\": 6684.35,\n            \"time\": 1586771820000\n        },\n        {\n            \"open\": 6682.71,\n            \"high\": 6683.61,\n            \"low\": 6679.34,\n            \"volume\": 37.627571,\n            \"close\": 6683.24,\n            \"time\": 1586771760000\n        },\n        {\n            \"open\": 6683.33,\n            \"high\": 6686.81,\n            \"low\": 6681.4,\n            \"volume\": 26.558738,\n            \"close\": 6683.53,\n            \"time\": 1586771700000\n        },\n        {\n            \"open\": 6681.38,\n            \"high\": 6687,\n            \"low\": 6680.82,\n            \"volume\": 46.546386,\n            \"close\": 6683.32,\n            \"time\": 1586771640000\n        },\n        {\n            \"open\": 6677.52,\n            \"high\": 6682,\n            \"low\": 6677.26,\n            \"volume\": 24.203536,\n            \"close\": 6681.37,\n            \"time\": 1586771580000\n        },\n        {\n            \"open\": 6682.54,\n            \"high\": 6682.54,\n            \"low\": 6677,\n            \"volume\": 33.415822,\n            \"close\": 6677.33,\n            \"time\": 1586771520000\n        }];\n\n        let chartDummyData = apiDummyData.map((val) => {\n                                return({ x: new Date(\"2017-01-01\"), y: [val.open, val.high, val.low, val.close] });\n                            });  \n                        \n        // console.log(\"data\", options);\n        getOptions.data[0].dataPoints = chartDummyData;\n        // options.title.text = \"Dummy Data\";\n        // // console.log(\"data\", options);\n        this.setState({stateOptions : getOptions});\n\n    }\n\n\trender() {\n        console.log(\"sec\",this.state.stateOptions);\n\t\treturn (\n\t\t<div>\n\t\t\t<CanvasJSChart options = {this.state.stateOptions}\n\t\t\t\tonRef={ref => this.chart = ref}\n\t\t\t/>\n\t\t\t{/*You can get reference to the chart instance as shown above using onRef. This allows you to access all chart properties and methods*/}\n\t\t</div>\n\t\t);\n\t}\n}\nexport default Chart;                             "]},"metadata":{},"sourceType":"module"}